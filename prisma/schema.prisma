generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model users {
  id                  String                @id @db.VarChar(21)
  discord_id          String?               @unique @db.VarChar(50)
  nickname            String?               @db.VarChar(20)
  name                String                @db.VarChar(30)
  email               String                @unique @db.VarChar(80)
  phone_number        String                @unique @db.VarChar(15)
  gender              String?               @db.VarChar(7)
  birthday            String?               @db.VarChar(15)
  restingheartrate    Int?
  createdat           DateTime?             @default(now()) @db.Timestamptz(6)
  updatedat           DateTime?             @default(now()) @db.Timestamptz(6)
  exercisepreferences exercisepreferences[]
  usersubscriptions   usersubscriptions[]
}

model exercisepreferences {
  id                         String    @id @db.VarChar(21)
  user_id                    String?   @db.VarChar(21)
  exercise_level             Int
  exercise_performance_level String?   @db.VarChar(10)
  exercise_goal              String    @db.VarChar(100)
  exercise_concern           String?   @db.VarChar(400)
  referral_source            String?   @db.VarChar(180)
  total_cholesterol          String?   @db.VarChar(100)
  ldl_cholesterol            String?   @db.VarChar(100)
  createdat                  DateTime? @default(now()) @db.Timestamptz(6)
  updatedat                  DateTime? @default(now()) @db.Timestamptz(6)
  users                      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("exercisepreferences")
}

model programbatches {
  id                String              @id @db.VarChar(21)
  program_id        String?             @db.VarChar(21)
  batch_number      Int
  createdat         DateTime?           @default(now()) @db.Timestamptz(6)
  updatedat         DateTime?           @default(now()) @db.Timestamptz(6)
  programs          programs?           @relation(fields: [program_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  usersubscriptions usersubscriptions[]
}

model programs {
  id                 String              @id @db.VarChar(21)
  type               String              @db.VarChar(10)
  description        String?
  start_date         DateTime?           @db.Date
  end_date           DateTime?           @db.Date
  duration_in_months Int?
  createdat          DateTime?           @default(now()) @db.Timestamptz(6)
  updatedat          DateTime?           @default(now()) @db.Timestamptz(6)
  programbatches     programbatches[]
  usersubscriptions  usersubscriptions[]
}

model events {
  id                String              @id @db.VarChar(21)
  name              String              @db.VarChar(100)
  description       String?
  duration          Int
  start_date        DateTime            @db.Date
  end_date          DateTime            @db.Date
  createdat         DateTime?           @default(now()) @db.Timestamptz(6)
  updatedat         DateTime?           @default(now()) @db.Timestamptz(6)
  usersubscriptions usersubscriptions[]
}

model usersubscriptions {
  id             String          @id @db.VarChar(21)
  user_id        String?         @db.VarChar(21)
  program_id     String?         @db.VarChar(21)
  batch_id       String?         @db.VarChar(21)
  event_id       String?         @db.VarChar(21)
  start_date     DateTime?       @db.Date
  end_date       DateTime?       @db.Date
  status         String?         @db.VarChar(10)
  createdat      DateTime?       @default(now()) @db.Timestamptz(6)
  updatedat      DateTime?       @default(now()) @db.Timestamptz(6)
  paymentinfo    paymentinfo[]
  programbatches programbatches? @relation(fields: [batch_id], references: [id], onUpdate: NoAction)
  events         events?         @relation(fields: [event_id], references: [id], onUpdate: NoAction)
  programs       programs?       @relation(fields: [program_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users          users?          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model paymentinfo {
  id                   String             @id @db.VarChar(21)
  user_subscription_id String?            @db.VarChar(21)
  amount               Decimal?           @db.Decimal(10, 2)
  payment_date         DateTime?          @db.Timestamptz(6)
  payment_key          String?            @db.VarChar(255)
  order_id             String?            @db.VarChar(255)
  order_name           String?            @db.VarChar(100)
  card_type            String?            @db.VarChar(50)
  owner_type           String?            @db.VarChar(50)
  currency             String?            @db.VarChar(10)
  createdat            DateTime?          @default(now()) @db.Timestamptz(6)
  updatedat            DateTime?          @default(now()) @db.Timestamptz(6)
  usersubscriptions    usersubscriptions? @relation(fields: [user_subscription_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Subscription {
  id               String             @id
  duration         Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  UserSubscription UserSubscription[]
}

model User {
  id               String             @id
  discord_id       String?            @unique
  nickname         String?
  name             String?
  birth            DateTime?
  restingHeartRate Int?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  UserSubscription UserSubscription[]
  Workouts         Workouts[]
}

model UserSubscription {
  id             String        @id
  userId         String?
  subscriptionId String?
  startDate      DateTime      @default(now())
  endDate        DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  Subscription   Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  User           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Workouts {
  id            String          @id
  category      WorkoutCategory
  minute        Int
  heartRate     Int
  userId        String
  point         Float
  intensityZone Int
  dailyLoad     Float
  workoutName   WorkoutName?    @default(OTHER)
  image         String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  User          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum WorkoutCategory {
  CARDIO
  INTERVAL
}

enum WorkoutName {
  WEIGHT_TRAINING
  FUNCTIONAL_STRENGTH_TRAINING
  BASKETBALL
  PILATES
  PICKLEBALL
  YOGA
  RUNNING
  CYCLING
  WALKING
  HIIT
  CLIMBING
  STEPPER
  TENNIS
  SOCCER
  SPINNING
  SWIMMING
  BOXING
  CROSS_TRAINING
  OTHER
}
